dim(s) da la dimensión del dataframe OUTPUT: [1] 12 2

A los dataframes accdemos por [fila, columna]
Si ponemos so=s[order(s$Radio),] ordenamos las filas por magnitud según la variable Radio (se pone s$Radio porque es un avariable dentro del dataframe), 
y las columnas no las tocamos. 

Con so=s[rev(order(s$Radio)),] le damos la vuelta. 

Con length(s$Radio) miramos la longitud de esa columna. 

max y min dan los valores máximo y mínimo --> rango=max(s$Radio)-min(s$Radio) --> OUTPUT: [1] 29
Cuidado con range da el valor mayor y menor. 

Definimos Radio=s$Radio para no repetir. 

Creamos una función para calcular el rango: rango=function(Radio){max(Radio)-min(Radio)}
La llamamos con rango(Radio), y sale 29. Pero la func solo está definida para esta ejecución. 
Con dump("rango", file="rango.R") la guardamos en el fichero rango.R
Con source("rango.R") la cargaríamos en siguientes ejecuciones

calculamos las frecuencias absolutas con fracabsradio<-table(s$Radio)
las acumuladas con fracabsacumradio<-cumsum(fracabsradio)

Para calcular las frecuencias relativas: frecrel=function(r){table(r)/length(r)}
dump("frecrel", file="frecrel.R")

Para calcular la media: mr<-mean(Radio)

Para calcular la desviación típica: sdr<-sd(Radio); CUIDADO la hace con n-1, no con n porque es mejor a la hora de extrapolar a la hora de trabajar con poblaciones. 
Una opción para arreglarlo: sdr=sqrt((sdr^2)*11/12)

Para calcular la varianza: varr=var(Radio), pero también hay que arreglarla. varr=varr*11/12

Para calcular la mediana: medianr<-median(Radio)

Para calcular el primer cuartil: cuar1=quantile(Radio, 0.25). Sale diferente porque usa distribuciones de probabilidad. 

Cargamos un ejemplo de Sweave: rnwfile<-system.file("Sweave", "example-1.Rnw", package="utils")
Con Sweave(rnwfile) genera el documento LaTeX y la gráfica necesaria

Con tools::texi2pdf("example-1.tex") invoca a MiKTeX y genera el pdf final. 

