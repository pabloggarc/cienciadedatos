\documentclass[12pt]{report}

\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage[margin=2.54cm]{geometry}
\usepackage[dvipsnames]{xcolor}
\usepackage{array, amssymb, amsthm, enumitem, fancyhdr, float, graphicx, hyperref, hologo, mathtools, tikz, tikz-cd}
\usepackage[spanish, noabbrev]{cleveref}

\pagestyle{fancy}
\lhead{\footnotesize \leftmark}
\rhead{\footnotesize \rightmark}

\title{
	\huge
	\noindent\textbf{Fundamentos de la Ciencia de Datos}\\
	
	{\Large \textit{Práctica 1}}
	\vspace{1cm}
	
	\huge
	Grado en Ingeniería Informática\\
	Universidad de Alcalá\\
	
	\vspace{1cm}
	
	\includegraphics[scale=0.075]{img/logo}
}

\author{
	Pablo García García\\
	Abel López Martínez\\
	Álvaro Jesús Martínez Parra\\
	Raúl Moratilla Núñez
}

\date{
	\large{14 de noviembre de 2023}
}

\hypersetup{
	pdftitle={Práctica 1}, 
	pdfauthor={Pablo García García, Abel López Martínez, Álvaro Jesús Martínez Parra, Raúl Moratilla Núñez}, 
	pdfsubject={Fundamentos de la Ciencia de Datos}, 
	pdfcenterwindow, 
	pdfnewwindow=true, 
	pdfkeywords={Entrega de la PL1 de laboratorio correspondiente al Curso 2023-2024}, 
	bookmarksopen=true 
}

\begin{document}
	
<<>>=
fichero = read.csv("distancia_universitarios.csv")
fichero

len = function(list){
	count = 0
	for (element in list){
		count = count + 1
	}
	count
}

distancias = fichero$Distancia

longitud = len(distancias)
longitud

bubble = function(list, asc = TRUE){
	n = len(list)
	if(asc){
		for (i in 2:n){
			for (j in 1:(n-1)){
				if (list[j] > list[j+1]){
					temp = list[j]
					list[j] = list[j+1]
					list[j+1] = temp
				}
			}
		}
	}
	else {
		for (i in 2:n){
			for (j in 1:(n-1)){
				if (list[j] < list[j+1]){
					temp = list[j]
					list[j] = list[j+1]
					list[j+1] = temp
				}
			}
		}
	}
	list
}
distanciasordenadas = bubble(distancias, FALSE)
distanciasordenadas

rank = function(list){
	ordered_list = bubble(list)
	ordered_list[len(ordered_list)] - ordered_list[1]
}

rango = rank(distanciasordenadas)
rango

absolute_freq = function(list){
	ordered_list = bubble(list)
	n = len(ordered_list)
	elements = vector()
	frequencies = vector()
	i = 1
	while (i <= n){
		actual_element = ordered_list[i]
		elements = append(elements, actual_element)
		actual_freq = 0
		j = i
		while(j <= n & actual_element == ordered_list[j]){
			actual_freq = actual_freq + 1
			j = j+1
		}
		frequencies = append(frequencies, actual_freq)
		i = j
	}
	rbind(elements, frequencies)
}

	

@

PARTE 2













<<>>=
tabla <- matrix(c(1,1,0,1,1, 1,1,1,1,0, 1,1,0,1,0, 1,0,1,1,0, 1,1,0,0,0, 0,0,0,1,0),6,5,byrow=TRUE,dimnames=list(c("suceso1","suceso2","suceso3","suceso4","suceso5","suceso6"),c("Pan","Agua","Café","Leche","Naranjas")))

tabla


@

<<>>=
union = function(c1, c2){
	if (len(c1) == 0){
		c2
	}
	else if (is.element(c1[1], c2)){
		union(c1[-1], c2)
	}
	else{
		union(c1[-1], append(c2, c1[1]))
	}
}

unionp = union(c("P","A", "L"), c("P","A", "C", "N"))
unionp


intersect = function(c1, c2){
	if (len(c1) == 0){
		c()
	}
	else if (is.element(c1[1], c2)){
		append(intersect(c1[-1], c2), c1[1])
	}
	else{
		intersect(c1[-1], c2)
	}
}

intersectp = intersect(c("P","A", "L"), c("P","A", "C", "N"))
intersectp
	
support = function(table, elements){
	count_support = 0
	for (i in 1:len(table[,1])){
		acum = 1
		for (element in elements){
			acum = (table[i,element]) & acum
		}
		count_support = count_support + acum
	}
	count_support/len(table[,1])		
}

soporte = support(tabla, c("Pan","Agua"))
soporte


support_clasif = function(table, ocurrences, s){
	valid_ocurrences = c()
	for (ocurrence in ocurrences){
		support_oc = support(table, ocurrence)
		if (support_oc >= s){
			valid_ocurrences = append(valid_ocurrences, ocurrence)
		}
	}
	valid_ocurrences	
}

possible_valid_occurrences = function(table, elemental_valid_occurences) {
	occurrences = c(elemental_valid_occurences)
	occurrences_ant = elemental_valid_occurences
	k = 1
	while (k <= len(tabla[1])) {
		occurrences_act = c()
		for (i in 1:len(occurrences_ant)) {
			A = occurrences_ant[i]
			for (j in (i+1):len(occurrences_ant)) {
				B = occurrences_ant[j]
				if (identical(A[1:(len(A)-1)], B[1:(len(B)-1)]) & A[len(A)] == B[len(B)]) {
					occurrences_act = append(occurrences_act, union(A, B))
				}
			}
		}
		occurrences = append(occurrences, occurrences_act)
		occurrences_ant = occurrences_act
		k = k+1
	}
	occurrences
}

apriori = function(table) {
	soporte_clasif = support_clasif(tabla, c(c("Pan"), c("Agua") ,c("Leche"), c("Café"), c("Naranjas")), 0.5) 
	print(soporte_clasif)
	p_v_o = possible_valid_occurrences(tabla, soporte_clasif)
	p_v_o
}

tabla <- matrix(c(1,1,0,1,1, 1,1,1,1,0, 1,1,0,1,0, 1,0,1,1,0, 1,1,0,0,0, 0,0,0,1,0),6,5,byrow=TRUE,dimnames=list(c("suceso1","suceso2","suceso3","suceso4","suceso5","suceso6"),c("Pan","Agua","Café","Leche","Naranjas")))

tabla

apriori(tabla)

A = c("Naranjas, Agua")
B = c("Leche")
A[1:(len(A)-1)]
B[1:(len(B)-1)]
identical(A[1:(len(A)-1)], B[1:(len(B)-1)])
@
40 de soporte y 90 de confianza
\end{document}          
