\documentclass[12pt]{report}

\usepackage[utf8]{inputenc}
\usepackage[spanish]{babel}
\usepackage[margin=2.54cm]{geometry}
\usepackage[dvipsnames]{xcolor}
\usepackage{array, amssymb, amsthm, enumitem, fancyhdr, float, graphicx, hyperref, hologo, mathtools, tikz, tikz-cd}
\usepackage[spanish, noabbrev]{cleveref}

\pagestyle{fancy}
\lhead{\footnotesize \leftmark}
\rhead{\footnotesize \rightmark}

\title{
	\huge
	\noindent\textbf{Fundamentos de la Ciencia de Datos}\\
	
	{\Large \textit{Práctica 1}}
	\vspace{1cm}
	
	\huge
	Grado en Ingeniería Informática\\
	Universidad de Alcalá\\
	
	\vspace{1cm}
	
	\includegraphics[scale=0.075]{img/logo}
}

\author{
	Pablo García García\\
	Abel López Martínez\\
	Álvaro Jesús Martínez Parra\\
	Raúl Moratilla Núñez
}

\date{
	\large{14 de noviembre de 2023}
}

\hypersetup{
	pdftitle={Práctica 1}, 
	pdfauthor={Pablo García García, Abel López Martínez, Álvaro Jesús Martínez Parra, Raúl Moratilla Núñez}, 
	pdfsubject={Fundamentos de la Ciencia de Datos}, 
	pdfcenterwindow, 
	pdfnewwindow=true, 
	pdfkeywords={Entrega de la PL1 de laboratorio correspondiente al Curso 2023-2024}, 
	bookmarksopen=true 
}

\begin{document}
	
<<>>=
fichero = read.csv("distancia_universitarios.csv")
fichero

len = function(list){
	count = 0
	for (element in list){
		count = count + 1
	}
	count
}

distancias = fichero$Distancia

longitud = len(distancias)
longitud

bubble = function(list, asc = TRUE){
	n = len(list)
	if(asc){
		for (i in 2:n){
			for (j in 1:(n-1)){
				if (list[j] > list[j+1]){
					temp = list[j]
					list[j] = list[j+1]
					list[j+1] = temp
				}
			}
		}
	}
	else {
		for (i in 2:n){
			for (j in 1:(n-1)){
				if (list[j] < list[j+1]){
					temp = list[j]
					list[j] = list[j+1]
					list[j+1] = temp
				}
			}
		}
	}
	list
}
distanciasordenadas = bubble(distancias, FALSE)
distanciasordenadas

rank = function(list){
	ordered_list = bubble(list)
	ordered_list[len(ordered_list)] - ordered_list[1]
}

rango = rank(distanciasordenadas)
rango

absolute_freq = function(list){
	ordered_list = bubble(list)
	n = len(ordered_list)
	elements = vector()
	frequencies = vector()
	i = 1
	while (i <= n){
		actual_element = ordered_list[i]
		elements = append(elements, actual_element)
		actual_freq = 0
		j = i
		while(j <= n & actual_element == ordered_list[j]){
			actual_freq = actual_freq + 1
			j = j+1
		}
		frequencies = append(frequencies, actual_freq)
		i = j
	}
	rbind(elements, frequencies)
}
frecuencia_abs = absolute_freq(distancias)
frecuencia_abs

relative_freq = function(list){
	f_abs = absolute_freq(list)
	elements = f_abs[1,]
	abs_fvalues = f_abs[2,]
	rbind(elements,abs_fvalues/len(list))
}

frecuencia_rel = relative_freq(distancias)
frecuencia_rel

acum_absolute_freq = function(list){
	f_abs = absolute_freq(list)
	elements = f_abs[1,]
	abs_fvalues = f_abs[2,]
	acum_abs_fvalues = vector()
	acum = 0
	for (i in 1:len(elements)){
		acum = acum + abs_fvalues[i]
		acum_abs_fvalues = append(acum_abs_fvalues, acum)
	}
	rbind(elements, acum_abs_fvalues)
}
frecuencia_abs_acum = acum_absolute_freq(distancias)
frecuencia_abs_acum

acum_relative_freq = function(list){
	f_rel = relative_freq(list)
	elements = f_rel[1,]
	rel_fvalues = f_rel[2,]
	acum_rel_fvalues = vector()
	acum = 0
	for (i in 1:len(elements)){
		acum = acum + rel_fvalues[i]
		acum_rel_fvalues = append(acum_rel_fvalues, acum)
	}
	rbind(elements, acum_rel_fvalues)
}
frecuencia_rel_acum = acum_relative_freq(distancias)
frecuencia_rel_acum

mean = function(list){
	total = 0
	n = len(list)
	for (i in 1:n){
		total = total + list[i]
	}
	mean = total / n
	mean
}

media = mean(distancias)
media

mode = function(list){
	frequencies = absolute_freq(list)
	elements = frequencies[1,]
	freq_values = frequencies[2,]
	actual_mode = 0
	actual_mode_val = 0
	for (i in 1:len(elements)){
		if (freq_values[i] > actual_mode_val){
			actual_mode_val = freq_values[i]
			actual_mode = elements[i]
		}
	}
	actual_mode
}

moda = mode(distancias)
moda
	
median = function(list){
	n = len(list)
	if (n%%2 == 0){
		median = (list[n/2] + list[(n/2)+1]) / 2
	}
	else{
		median = list[(n+1)/2]
	}
	median
}

mediana = median(distancias)
mediana

standard_desv = function(list){
	mean = mean(list)
	n = len(list)
	add = 0
	for (i in 1:n){
		add = add + ((list[i] - mean)^2)
	}
	sqrt(add/n)
}

desviacion = standard_desv(distancias)
desviacion

variance = function(list){
	desv = standard_desv(list)
	var = desv^2
	var
}

varianza = variance(distancias)
varianza

quant = function(list, c){
	ordered_list = bubble(list)
	n = len(list)
	if (c < 0){
		quant = 0
	}
	else{
		if((n*c)%%1 == 0){
			quant = (ordered_list[(n*c)] + ordered_list[(n*c) + 1]) / 2
		}
		else {
			int_prod = floor(n*c)
			quant = ordered_list[int_prod + 1]
		}
	}
	quant
}	

cuartil1 = quant(distancias,0.25)
cuartil2 = quant(distancias,0.5)
cuartil3 = quant(distancias,0.75)
cuartil1
cuartil2
cuartil3		

@
\end{document}          
