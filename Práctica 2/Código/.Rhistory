distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
#while(0 && len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
print("unimos")
print(min_y)
print(min_x)
#}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
print(i)
print(j)
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
#while(0 && len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
print("unimos")
print(min_y)
print(min_x)
#}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
#while(0 && len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
print("unimos")
print(min_y)
print(min_x)
#}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
iter = 1
while(len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
new_cluster = cat("C", iter, "{", clusters[min_x], ", ", clusters[min_y], "}")
print(new_cluster)
}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
iter = 1
while(len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
new_cluster = paste("C", iter, "{", clusters[min_x], ", ", clusters[min_y], "}")
print(new_cluster)
}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
iter = 1
while(len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
new_cluster = paste("C",iter, "{", clusters[min_x], ", ", clusters[min_y], "}")
print(new_cluster)
}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
iter = 1
while(len(clusters) > 1) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
new_cluster = paste0("C",iter, "{", clusters[min_x], ",", clusters[min_y], "}")
print(new_cluster)
}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
len = function(list) {
count = 0
for (element in list) {
count = count + 1
}
count
}
euc_distance = function(p1, p2) {
sqrt(((p1[1] - p2[1])^2) + ((p1[2] - p2[2])^2))
}
fcd_min = function(distances) {
print(distances)
min_y = 2
min_x = 1
min_v = distances[2, 1]
for (i in 2:len(distances[,1])) {
for (j in 1:(i-1)) {
if (distances[i, j] < min_v) {
min_v = distances[i,j]
min_y = i
min_x = j
}
}
}
c(min_v, min_y, min_x)
}
create_distance_matrix = function(df) {
n = len(df[,1])
empty_matrix = matrix(0, ncol = n, nrow = n)
distances = data.frame(empty_matrix)
for (i in 1:n) {
for (j in i:n) {
distances[j, i] = euc_distance(df[i,], df[j,])
}
}
distances
}
ahc = function(df) {
distances = create_distance_matrix(df)
updated_distances = distances
clusters = colnames(distances)
iter = 1
while(iter < len(df[,1])) {
my_min = fcd_min(updated_distances)
min_v = my_min[1]
min_y = my_min[2]
min_x = my_min[3]
new_cluster = paste0("C",iter, "{", clusters[min_x], ",", clusters[min_y], "}")
print(new_cluster)
iter = iter + 1
}
}
df_sample = data.frame(t(matrix(c(0.89, 2.94, 4.36, 5.21, 3.75, 1.12, 6.25, 3.14, 4.1, 1.8, 3.9, 4.27), 2, 6, dimnames=list(c("X","Y")))))
ahc(df_sample)
1:5
# Primero, instala e importa el paquete data.tree
install.packages("data.tree")
library(data.tree)
# Crea un nodo raíz
raiz <- Node$new("Raíz")
# Agrega hijos al nodo raíz
raiz$AddChild("Hijo 1")
raiz$AddChild("Hijo 2")
# Agrega un nieto al primer hijo
raiz$children[[1]]$AddChild("Nieto 1")
# Imprime el árbol
print(raiz)
raiz$children[[1]]$AddChild("Nieto 1")
# Primero, instala e importa el paquete data.tree
install.packages("data.tree")
library(data.tree)
# Crea un nodo raíz
raiz <- Node$new("Raíz")
# Agrega hijos al nodo raíz
raiz$AddChild("Hijo 1")
raiz$AddChild("Hijo 2")
raiz$AddChild("Hijo 3")
# Agrega un nieto al primer hijo
raiz$children[[1]]$AddChild("Nieto 1")
raiz$children[[2]]$AddChild("Nieto 2")
raiz$children[[3]]$AddChild("Nieto 3")
# Imprime el árbol
print(raiz)
install.packages("data.tree")
install.packages("data.tree")
# Primero, instala e importa el paquete data.tree
#install.packages("data.tree")
library(data.tree)
# Crea un nodo raíz
raiz <- Node$new("Raíz")
# Agrega hijos al nodo raíz
raiz$AddChild("Hijo 1")
raiz$AddChild("Hijo 2")
raiz$AddChild("Hijo 3")
# Agrega un nieto al primer hijo
raiz$children[[1]]$AddChild("Nieto 1")
raiz$children[[2]]$AddChild("Nieto 2")
raiz$children[[3]]$AddChild("Nieto 3")
# Imprime el árbol
print(raiz)
(calificaciones = read.table("datos.txt"))
(calificaciones = read.table("datos.txt"))
getwc()
getwd()
setwd("G:/Mi unidad/Universidad/Curso_4_Cuatri_7/CdeDatos/cienciadedatos/Apuntes/Abel")
(calificaciones = read.table("datos.txt"))
install.packages(rpart)
install.packages("rpart")
library(rpart, lib.loc = "C:/Program Files/R/R-4.3.1/library")
(muestra = data.frame(calificaciones))
clasificacion = rpart(C.G~T+L+P, data=muestra, method="class", minsplit=1)
clasificacion
(planetas = read.table("datos_planetas.txt"))
(planetas = read.table("datos_planetas.txt"))
regresion = lm(D~R, data=muestra)
(muestra = read.table("datos_planetas.txt"))
regresion = lm(D~R, data=muestra)
regresion
summary(regresion)
(res = summary(regresion)$residuals)
(sr = sqrt(sum(res^2)/4))
for (i in 1:length(res)) {
if (res[i] > 3*sr) {
print("el suceso ")
print(res[i])
print(" es un suceso anómalo o outlier")
}
}
(muestra = read.table("datos_materiales.txt"))
(muestra = read.table("datos_materiales.txt"))
(muestra = read.table("datos_materiales.txt"))
(muestra = read.table("datos_materiales.txt"))
regresion = lm(D~R, data=muestra)
summary(regresion)
#Vemos si tenemos outliers
(res = summary(regresion)$residuals)
(sr = sqrt(sum(res^2)/4))
for (i in 1:length(res)) {
if (res[i] > 3*sr) {
print("el suceso ")
print(res[i])
print(" es un suceso anómalo o outlier")
}
}
(muestra = read.table("datos_materiales.txt"))
regresion = lm(D~R, data=muestra)
summary(regresion)
#Vemos si tenemos outliers
(res = summary(regresion)$residuals)
(sr = sqrt(sum(res^2)/4))
for (i in 1:length(res)) {
if (res[i] > 2*sr/7) {
print("el suceso ")
print(res[i])
print(" es un suceso anómalo o outlier")
}
}
(muestra = read.table("datos_materiales.txt"))
regresion = lm(muestra$D~muestra$R)
summary(regresion)
#Vemos si tenemos outliers
(res = summary(regresion)$residuals)
(sr = sqrt(sum(res^2)/7))
for (i in 1:length(res)) {
if (res[i] > 2*sr) {
print("el suceso ")
print(res[i])
print(" es un suceso anómalo o outlier")
}
}
c("", "", "", ""),
install.packages("openxlsx")
library(openxlsx)
(data = read.xlsx("../data/calificaciones.xlsx", sheetIndex = 1, header = FALSE))
(data = read.xlsx("../data/calificaciones.xlsx"))
setwd("G:/Mi unidad/Universidad/Curso_4_Cuatri_7/CdeDatos/cienciadedatos/Práctica 2/Código")
(data = read.xlsx("../data/calificaciones.xlsx"))
